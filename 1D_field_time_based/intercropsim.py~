import matplotlib.pyplot as pl
import numpy as np
import json
import time
import utils as ut
from joblib import Parallel, delayed

def run_onesim(sim_params, svg=None):
   t0=time.time()
   xr=[0.4,9.6]
   t = 0

   plants=[]

   x=np.random.uniform(xr[0],xr[1])
   dt = int(np.random.exponential(1/sim_params["planting_rate"]))

   if dt>0: plants, t = ut.run_dt(dt, plants, t, sim_params["tmax"])
   plants.append(ut.plant(x, t, "c"))

   for i in range(sim_params["N"]):
      planted = 0
      while (planted==0):
         inter = 0 
         x=np.random.uniform(xr[0],xr[1])
         dt = int(np.random.exponential(1/sim_params["planting_rate"]))
         species = np.random.choice(["c", "l"], p =(sim_params["pc"], 1-sim_params["pc"]))
         p1 = ut.plant(x, t+dt, species)

         breaking = False   
         for p2 in plants:
            ti = t+dt
            tf = min(p2["t"]+sim_params["tmax"][p2["species"]], t+dt+sim_params["tmax"][p1["species"]]) 
            for k in range(ti, tf):
               #we iterate until death of first plant 
               val = ut.is_intersect_dynamic(p1, p2, k, sim_params["R"], sim_params["a"])
               if val: 
                   inter = 1
                   breaking = True
                   break
            if breaking: break       

         if not(inter): 
            if not(i%1000): print(i, "planted! ", dt)
            planted = 1
            if dt>0: 
               plants, t = ut.run_dt(dt, plants, t, sim_params["tmax"])        
            plants.append(p1)
   if svg:
      print(svg)
      res = {}
      res["sim_params"] = sim_params
      res["plants"] = plants
      res["sim_time"] = time.time()-t0
      json.dump(res, open(svg,"w"))      
   return plants

def run_pr(pr):
   sim_params = json.load(open("params.json")) 
   sim_params["planting_rate"] = pr
   plants = run_onesim(sim_params, "res/%.2f.json"%pr)

   
prs = np.linspace(.05, 1.1, 22)   
Parallel(n_jobs=35)(delayed(run_pr)(pr) for pr in prs)

"""
sim = json.load(open("sim.json","r"))
plants = sim["plants"]
sim_params = sim["sim_params"]
svg = "sim.png"
"""

#ut.plot_field(plants, sim_params, svg)
